// Code generated by "enumer -type=BODVoltage885 -trimprefix=BODVoltage885 -transform=snake -json -text"; DO NOT EDIT.

package n76

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BODVoltage885Name = "4v33v73v02v72v42v22v01v7"

var _BODVoltage885Index = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24}

const _BODVoltage885LowerName = "4v33v73v02v72v42v22v01v7"

func (i BODVoltage885) String() string {
	if i >= BODVoltage885(len(_BODVoltage885Index)-1) {
		return fmt.Sprintf("BODVoltage885(%d)", i)
	}
	return _BODVoltage885Name[_BODVoltage885Index[i]:_BODVoltage885Index[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BODVoltage885NoOp() {
	var x [1]struct{}
	_ = x[BODVoltage8854v3-(0)]
	_ = x[BODVoltage8853v7-(1)]
	_ = x[BODVoltage8853v0-(2)]
	_ = x[BODVoltage8852v7-(3)]
	_ = x[BODVoltage8852v4-(4)]
	_ = x[BODVoltage8852v2-(5)]
	_ = x[BODVoltage8852v0-(6)]
	_ = x[BODVoltage8851v7-(7)]
}

var _BODVoltage885Values = []BODVoltage885{BODVoltage8854v3, BODVoltage8853v7, BODVoltage8853v0, BODVoltage8852v7, BODVoltage8852v4, BODVoltage8852v2, BODVoltage8852v0, BODVoltage8851v7}

var _BODVoltage885NameToValueMap = map[string]BODVoltage885{
	_BODVoltage885Name[0:3]:        BODVoltage8854v3,
	_BODVoltage885LowerName[0:3]:   BODVoltage8854v3,
	_BODVoltage885Name[3:6]:        BODVoltage8853v7,
	_BODVoltage885LowerName[3:6]:   BODVoltage8853v7,
	_BODVoltage885Name[6:9]:        BODVoltage8853v0,
	_BODVoltage885LowerName[6:9]:   BODVoltage8853v0,
	_BODVoltage885Name[9:12]:       BODVoltage8852v7,
	_BODVoltage885LowerName[9:12]:  BODVoltage8852v7,
	_BODVoltage885Name[12:15]:      BODVoltage8852v4,
	_BODVoltage885LowerName[12:15]: BODVoltage8852v4,
	_BODVoltage885Name[15:18]:      BODVoltage8852v2,
	_BODVoltage885LowerName[15:18]: BODVoltage8852v2,
	_BODVoltage885Name[18:21]:      BODVoltage8852v0,
	_BODVoltage885LowerName[18:21]: BODVoltage8852v0,
	_BODVoltage885Name[21:24]:      BODVoltage8851v7,
	_BODVoltage885LowerName[21:24]: BODVoltage8851v7,
}

var _BODVoltage885Names = []string{
	_BODVoltage885Name[0:3],
	_BODVoltage885Name[3:6],
	_BODVoltage885Name[6:9],
	_BODVoltage885Name[9:12],
	_BODVoltage885Name[12:15],
	_BODVoltage885Name[15:18],
	_BODVoltage885Name[18:21],
	_BODVoltage885Name[21:24],
}

// BODVoltage885String retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BODVoltage885String(s string) (BODVoltage885, error) {
	if val, ok := _BODVoltage885NameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BODVoltage885NameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BODVoltage885 values", s)
}

// BODVoltage885Values returns all values of the enum
func BODVoltage885Values() []BODVoltage885 {
	return _BODVoltage885Values
}

// BODVoltage885Strings returns a slice of all String values of the enum
func BODVoltage885Strings() []string {
	strs := make([]string, len(_BODVoltage885Names))
	copy(strs, _BODVoltage885Names)
	return strs
}

// IsABODVoltage885 returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BODVoltage885) IsABODVoltage885() bool {
	for _, v := range _BODVoltage885Values {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BODVoltage885
func (i BODVoltage885) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BODVoltage885
func (i *BODVoltage885) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BODVoltage885 should be a string, got %s", data)
	}

	var err error
	*i, err = BODVoltage885String(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for BODVoltage885
func (i BODVoltage885) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for BODVoltage885
func (i *BODVoltage885) UnmarshalText(text []byte) error {
	var err error
	*i, err = BODVoltage885String(string(text))
	return err
}
