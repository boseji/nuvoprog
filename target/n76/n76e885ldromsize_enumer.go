// Code generated by "enumer -type=N76E885LDROMSize -trimprefix=N76E885LDROM -transform=snake -json -text"; DO NOT EDIT.

package n76

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _N76E885LDROMSizeName = "0kb1kb2kb3kb4kb"

var _N76E885LDROMSizeIndex = [...]uint8{0, 3, 6, 9, 12, 15}

const _N76E885LDROMSizeLowerName = "0kb1kb2kb3kb4kb"

func (i N76E885LDROMSize) String() string {
	if i >= N76E885LDROMSize(len(_N76E885LDROMSizeIndex)-1) {
		return fmt.Sprintf("N76E885LDROMSize(%d)", i)
	}
	return _N76E885LDROMSizeName[_N76E885LDROMSizeIndex[i]:_N76E885LDROMSizeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _N76E885LDROMSizeNoOp() {
	var x [1]struct{}
	_ = x[N76E885LDROM0KB-(0)]
	_ = x[N76E885LDROM1KB-(1)]
	_ = x[N76E885LDROM2KB-(2)]
	_ = x[N76E885LDROM3KB-(3)]
	_ = x[N76E885LDROM4KB-(4)]
}

var _N76E885LDROMSizeValues = []N76E885LDROMSize{N76E885LDROM0KB, N76E885LDROM1KB, N76E885LDROM2KB, N76E885LDROM3KB, N76E885LDROM4KB}

var _N76E885LDROMSizeNameToValueMap = map[string]N76E885LDROMSize{
	_N76E885LDROMSizeName[0:3]:        N76E885LDROM0KB,
	_N76E885LDROMSizeLowerName[0:3]:   N76E885LDROM0KB,
	_N76E885LDROMSizeName[3:6]:        N76E885LDROM1KB,
	_N76E885LDROMSizeLowerName[3:6]:   N76E885LDROM1KB,
	_N76E885LDROMSizeName[6:9]:        N76E885LDROM2KB,
	_N76E885LDROMSizeLowerName[6:9]:   N76E885LDROM2KB,
	_N76E885LDROMSizeName[9:12]:       N76E885LDROM3KB,
	_N76E885LDROMSizeLowerName[9:12]:  N76E885LDROM3KB,
	_N76E885LDROMSizeName[12:15]:      N76E885LDROM4KB,
	_N76E885LDROMSizeLowerName[12:15]: N76E885LDROM4KB,
}

var _N76E885LDROMSizeNames = []string{
	_N76E885LDROMSizeName[0:3],
	_N76E885LDROMSizeName[3:6],
	_N76E885LDROMSizeName[6:9],
	_N76E885LDROMSizeName[9:12],
	_N76E885LDROMSizeName[12:15],
}

// N76E885LDROMSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func N76E885LDROMSizeString(s string) (N76E885LDROMSize, error) {
	if val, ok := _N76E885LDROMSizeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _N76E885LDROMSizeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to N76E885LDROMSize values", s)
}

// N76E885LDROMSizeValues returns all values of the enum
func N76E885LDROMSizeValues() []N76E885LDROMSize {
	return _N76E885LDROMSizeValues
}

// N76E885LDROMSizeStrings returns a slice of all String values of the enum
func N76E885LDROMSizeStrings() []string {
	strs := make([]string, len(_N76E885LDROMSizeNames))
	copy(strs, _N76E885LDROMSizeNames)
	return strs
}

// IsAN76E885LDROMSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i N76E885LDROMSize) IsAN76E885LDROMSize() bool {
	for _, v := range _N76E885LDROMSizeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for N76E885LDROMSize
func (i N76E885LDROMSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for N76E885LDROMSize
func (i *N76E885LDROMSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("N76E885LDROMSize should be a string, got %s", data)
	}

	var err error
	*i, err = N76E885LDROMSizeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for N76E885LDROMSize
func (i N76E885LDROMSize) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for N76E885LDROMSize
func (i *N76E885LDROMSize) UnmarshalText(text []byte) error {
	var err error
	*i, err = N76E885LDROMSizeString(string(text))
	return err
}
